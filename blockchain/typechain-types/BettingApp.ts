/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BettingAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bets"
      | "deposit"
      | "getBet"
      | "getMyBets"
      | "getMyLatestActiveBet"
      | "getTotalBets"
      | "owner"
      | "placeBet"
      | "playerBalances"
      | "poolBalance"
      | "resolveBet"
      | "userBets"
      | "withdraw"
      | "withdrawPool"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetPlaced"
      | "BetResolved"
      | "FundsDeposited"
      | "FundsWithdrawn"
      | "PoolWithdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bets", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMyBets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMyLatestActiveBet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveBet",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userBets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPool",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyLatestActiveBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolveBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPool",
    data: BytesLike
  ): Result;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    betIndex: BigNumberish,
    player: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [betIndex: bigint, player: string, amount: bigint];
  export interface OutputObject {
    betIndex: bigint;
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetResolvedEvent {
  export type InputTuple = [
    betIndex: BigNumberish,
    player: AddressLike,
    amount: BigNumberish,
    isCheckedOut: boolean
  ];
  export type OutputTuple = [
    betIndex: bigint,
    player: string,
    amount: bigint,
    isCheckedOut: boolean
  ];
  export interface OutputObject {
    betIndex: bigint;
    player: string;
    amount: bigint;
    isCheckedOut: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BettingApp extends BaseContract {
  connect(runner?: ContractRunner | null): BettingApp;
  waitForDeployment(): Promise<this>;

  interface: BettingAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean] & {
        player: string;
        amount: bigint;
        isResolved: boolean;
        isCheckedOut: boolean;
      }
    ],
    "view"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  getBet: TypedContractMethod<
    [betIndex: BigNumberish],
    [
      [string, bigint, boolean, boolean] & {
        player: string;
        amount: bigint;
        isResolved: boolean;
        isCheckedOut: boolean;
      }
    ],
    "view"
  >;

  getMyBets: TypedContractMethod<[], [bigint[]], "view">;

  getMyLatestActiveBet: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean] & {
        betIndex: bigint;
        amount: bigint;
        isResolved: boolean;
        isCheckedOut: boolean;
      }
    ],
    "view"
  >;

  getTotalBets: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  playerBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  poolBalance: TypedContractMethod<[], [bigint], "view">;

  resolveBet: TypedContractMethod<
    [betIndex: BigNumberish, isCheckedOut: boolean],
    [void],
    "nonpayable"
  >;

  userBets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  withdrawPool: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean] & {
        player: string;
        amount: bigint;
        isResolved: boolean;
        isCheckedOut: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBet"
  ): TypedContractMethod<
    [betIndex: BigNumberish],
    [
      [string, bigint, boolean, boolean] & {
        player: string;
        amount: bigint;
        isResolved: boolean;
        isCheckedOut: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyBets"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMyLatestActiveBet"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean] & {
        betIndex: bigint;
        amount: bigint;
        isResolved: boolean;
        isCheckedOut: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalBets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "playerBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resolveBet"
  ): TypedContractMethod<
    [betIndex: BigNumberish, isCheckedOut: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userBets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPool"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "BetResolved"
  ): TypedContractEvent<
    BetResolvedEvent.InputTuple,
    BetResolvedEvent.OutputTuple,
    BetResolvedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PoolWithdrawn"
  ): TypedContractEvent<
    PoolWithdrawnEvent.InputTuple,
    PoolWithdrawnEvent.OutputTuple,
    PoolWithdrawnEvent.OutputObject
  >;

  filters: {
    "BetPlaced(uint256,address,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "BetResolved(uint256,address,uint256,bool)": TypedContractEvent<
      BetResolvedEvent.InputTuple,
      BetResolvedEvent.OutputTuple,
      BetResolvedEvent.OutputObject
    >;
    BetResolved: TypedContractEvent<
      BetResolvedEvent.InputTuple,
      BetResolvedEvent.OutputTuple,
      BetResolvedEvent.OutputObject
    >;

    "FundsDeposited(address,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "PoolWithdrawn(address,uint256)": TypedContractEvent<
      PoolWithdrawnEvent.InputTuple,
      PoolWithdrawnEvent.OutputTuple,
      PoolWithdrawnEvent.OutputObject
    >;
    PoolWithdrawn: TypedContractEvent<
      PoolWithdrawnEvent.InputTuple,
      PoolWithdrawnEvent.OutputTuple,
      PoolWithdrawnEvent.OutputObject
    >;
  };
}
